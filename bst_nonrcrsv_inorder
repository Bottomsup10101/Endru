/*
    14 Write a C++ program to create a Binary Search Tree for N nodes, and implement non-
       recursive in-order tree traversal
*/
/*
    13 Write a C++ program to create a Binary Search Tree for N nodes, and implement non-
       recursive pre-order tree traversal
*/
#include <iostream>
using namespace std;

const int siz = 100;

struct node {
    int data;
    node* left;
    node* right;
};

class BST {
    node* root;

public:
    BST(){root=NULL;}
    
    void create_BST();
    void nr_pre() { nr_pre(root); }
private:
    void nr_pre(node* t);
};

class stack {
    node* a[siz];
    int top;

public:
    stack(){top=-1;}
    
    bool empty() {
        return top == -1;
    }



    void push(node* t){
        if(top!=siz-1)
            a[++top]=t;
    }
    node* pop() {
    if (top != -1) 
        return a[top--];
     else 
        return NULL; 
}

};



void BST::nr_inorder(node* t) {
    stack s1;
    while (t != NULL) {
        
        s1.push(t);
        t = t->left;
    }
    while (!s1.empty()) {
        t = s1.pop();
        cout<<t->data<<" ";
        t = t->right;
        while (t != NULL) {
            s1.push(t);
            t = t->left;
        }
    }
}
void BST::create_BST() {
    int n, i;
    cout << "Enter No. of nodes: ";
    cin >> n;

    for (i = 0; i < n; i++) {
        node* nn = new node;
        if (!nn) {
            cout << "Memory full" << endl;
            exit(1); 
        }
        
        cout << "Enter data: ";
        cin >> nn->data;
        nn->left = nn->right = NULL;

        if (root == NULL) {
            root = nn;
            continue;
        }

        node* t = root;
        node* parent = NULL;

        while (t != NULL) {
            parent = t;
            if (nn->data < t->data) {
                t = t->left;
            } else {
                t = t->right;
            }
        }

        if (nn->data < parent->data) {
            parent->left = nn;
        } else {
            parent->right = nn;
        }
    }
}
int main() {
    BST b1;
    b1.create_BST();
    cout << "In-order Traversal: ";
    b1.nr_inorder();
cout<<endl;
return 0;
}
